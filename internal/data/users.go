package data

import (
	"context"
	"crypto/sha256"
	"database/sql"
	"errors"
	"fmt"
	"time"

	"golang.org/x/crypto/bcrypt"

	"github.com/aalperen0/portfolio-tracker/internal/validator"
)

type UserModel struct {
	DB *sql.DB
}

var AnonymousUser = &User{}

type User struct {
	ID        int64     `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	Password  password  `json:"-"`
	Activated bool      `json:"activated"`
	Version   int       `json:"-"`
}

type password struct {
	plaintext *string
	hash      []byte
}

// / The Set() method calculates the bcrypt hash of a plaintext password, and stores both
// / the hash and the plaintext versions in the struct.
// # Parameters
// @ plaintextPassword: receive a string of user's password
// # Returns
// @ returns error if hashing isnt implemented correctly
func (p *password) Set(plaintextPassword string) error {
	hash, err := bcrypt.GenerateFromPassword([]byte(plaintextPassword), 12)
	if err != nil {
		return fmt.Errorf("failed to hash password %w", err)
	}
	p.plaintext = &plaintextPassword
	p.hash = hash
	return nil
}

// / The Matches() method checks whether the provided plaintext password matches the
// / hashed password stored in the struct, returning true if it matches and false
// / otherwise.
// # Parameters
// @ plaintextPassword: receive a string of user's password
// # Returns
// @ returns error if hash doesn't match with password
func (p *password) Matches(plaintextPassword string) (bool, error) {
	if len(p.hash) == 0 {
		return false, errors.New("no password hash set")
	}

	err := bcrypt.CompareHashAndPassword(p.hash, []byte(plaintextPassword))
	if err != nil {
		switch {
		case errors.Is(err, bcrypt.ErrMismatchedHashAndPassword):
			return false, nil
		default:
			return false, err
		}
	}
	return true, nil
}

func ValidateEmail(v *validator.Validator, email string) {
	v.Check(email != "", "email", "must be provided")
	v.Check(validator.Matches(email, validator.EmailRx), "email", "must be a valid email address")
}

func ValidatePasswordPlainText(v *validator.Validator, password string) {
	v.Check(password != "", "password", "must be provided")
	v.Check(len(password) >= 8, "password", "must be at least 8 bytes")
	v.Check(len(password) <= 72, "password", "must not be more than 72 bytes")
}

func ValidateUser(v *validator.Validator, user *User) {
	v.Check(user.Name != "", "name", "must be provided")
	v.Check(len(user.Name) <= 500, "name", "must not be more than 500 bytes")

	ValidateEmail(v, user.Email)

	if user.Password.plaintext != nil {
		ValidatePasswordPlainText(v, *user.Password.plaintext)
	}

	if user.Password.hash == nil {
		panic("missing password hash for user")
	}
}

// / Insert a new record in the database for the user. Id, created_at and
// / version fields are all automatically generated by our database.
// # Parameters
// @ User
func (m UserModel) Insert(user *User) error {
	query := `INSERT INTO users(name, email, password_hash, activated)
	VALUES($1, $2, $3, $4)
	RETURNING id, created_at, version`

	args := []any{user.Name, user.Email, user.Password.hash, user.Activated}
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	err := m.DB.QueryRowContext(ctx, query, args...).Scan(&user.ID, &user.CreatedAt, &user.Version)
	if err != nil {
		switch {
		case err.Error() == `pq: duplicate key value violates unique constraint "users_email_key"`:
			return validator.ErrDuplicateEmail
		default:
			return err
		}
	}
	return nil
}

// / Retrieve the User details from the database by user's email address.
// / Email has an UNIQUE constraint on the email column, this SQL query will only
// / return one user at a time. (or none at all, in which case we return a ErrRecordNotFound error).
// # Parameters
// @ email(string): user's email
// # Return
// - User
func (m UserModel) GetByEmail(email string) (*User, error) {
	query := `SELECT id, name, email, password_hash, activated, version
			  FROM users
			  WHERE email = $1`

	var user User

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	err := m.DB.QueryRowContext(ctx, query, email).Scan(
		&user.ID,
		&user.Name,
		&user.Email,
		&user.Password.hash,
		&user.Activated,
		&user.Version,
	)
	if err != nil {
		switch {
		case errors.Is(err, sql.ErrNoRows):
			return nil, validator.ErrRecordNotFound

		default:
			return nil, err
		}
	}
	return &user, nil
}

func (m UserModel) UpdateUser(user *User) error {
	query := `UPDATE users
			  SET name = $1, email = $2, password_hash = $3, activated = $4, version = version + 1
			  WHERE id = $5 AND version = $6
			  RETURNING version`

	args := []any{
		user.Name,
		user.Email,
		user.Password.hash,
		user.Activated,
		user.ID,
		user.Version,
	}
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)

	defer cancel()

	err := m.DB.QueryRowContext(ctx, query, args...).Scan(&user.Version)
	if err != nil {
		switch {
		case err.Error() == `pq: duplicate key value violates unique constraint "users_email_key"`:
			return validator.ErrDuplicateEmail
		case errors.Is(err, sql.ErrNoRows):
			return validator.ErrEditConflict
		default:
			return err

		}
	}
	return nil
}

// / Retrieve the user with associated particular token,
// / If there is no matching found we send ErrRecordNotFound error
// # Parameters
// @ tokenScope(string): type of scope(activation, auth)
// @ tokenPlainText(string): get user's token sended by server
// # Return
// - return user associated with token or error in case of not found

func (m UserModel) GetUserByToken(tokenScope, tokenPlainText string) (*User, error) {
	tokenHash := sha256.Sum256([]byte(tokenPlainText))

	query := `SELECT users.id, users.name, users.email, users.password_hash, users.activated, users.version
              FROM users 
              JOIN tokens ON users.id = tokens.user_id
              WHERE tokens.hash = $1 AND tokens.scope = $2
              AND tokens.expiry > $3`

	args := []any{tokenHash[:], tokenScope, time.Now()}

	var user User
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	err := m.DB.QueryRowContext(ctx, query, args...).Scan(
		&user.ID,
		&user.Name,
		&user.Email,
		&user.Password.hash,
		&user.Activated,
		&user.Version,
	)
	if err != nil {
		switch {
		case errors.Is(err, sql.ErrNoRows):
			return nil, validator.ErrRecordNotFound
		default:
			return nil, err
		}
	}

	return &user, nil
}
